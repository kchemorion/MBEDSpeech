/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 28.04.2021 02:46:47

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 1616;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.048663929104804993, } };
const TfArray<1, int> quant0_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[8] = { -26, -106, -86, -75, -127, -65, 11, -40, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<1, float> quant2_scale = { 1, { 0.019117968156933784, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[16] = { -33, 46, -37, 15, -27, 51, 20, -60, 68, -64, -47, -88, -72, -127, -42, -27, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0091266492381691933, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[6] = { -4007, -4824, 10389, -4962, 991, 1659, };
const TfArray<1, int> tensor_dimension4 = { 1, { 6 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00031729353941045702, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[6*208] = { 
  -48, -1, -20, -16, -1, 3, 53, 26, 29, 17, -15, -6, 7, 22, -5, -14, -38, 14, -9, -36, -43, -8, 21, -13, 7, 12, -24, 20, -6, 13, 21, 5, -28, 40, 14, -14, -50, -15, 43, -47, 18, -10, -28, -20, 12, 25, 35, 14, -64, 52, 15, -39, -25, 3, 42, -54, -1, -13, -22, -34, 1, 12, 24, 13, -40, 41, 12, -38, -18, 24, 40, -49, 27, 0, -4, -54, 13, 22, 33, 24, -42, 48, 19, -35, -53, 27, 35, -46, -15, -6, -8, -40, 22, 2, 18, 15, -53, 35, 20, -34, -42, 32, 46, -41, -37, 1, -17, -28, -13, 8, 29, -12, -46, 40, 11, -9, -56, 43, 29, -61, -11, -8, 5, -36, 0, 11, 38, -2, -37, 38, 16, -9, -33, 43, 40, -50, 40, -11, -11, -19, -8, -16, 30, -7, -43, 46, 10, -23, -37, 30, 38, -38, 4, -8, 14, 8, -14, -25, 9, -13, -46, 29, 13, -53, -25, 32, 46, -44, -8, 10, 16, -7, 5, -46, 26, 5, -50, 41, 13, -31, -16, 37, -23, -36, -4, -4, -15, -32, 15, 21, 52, 5, -95, -10, -58, -7, 19, 30, -34, -29, -8, -52, -49, 4, -15, -113, -85, -57, 
  15, 3, -2, -35, 31, -23, 14, -68, 15, -18, -13, -31, -56, -77, 38, -26, 27, -50, -41, -40, 45, 11, 22, -26, 4, -5, 41, -41, -48, -21, 34, 8, 46, -90, -26, -21, 54, -20, 19, 2, 17, -9, 36, -61, -6, 14, 45, -3, 17, -44, -24, -53, 42, 30, 24, 34, -11, -11, 8, -38, -24, 20, 43, -16, 25, -59, -35, -62, 45, 12, 14, 21, -19, -7, 26, -92, -18, 30, 22, -12, 17, -55, -41, -48, 47, 31, 13, 32, -48, -7, 46, -66, -11, 37, 31, -44, 37, -53, -38, -29, 39, 37, 3, 28, 2, 3, 33, -58, -21, 35, 34, -47, 22, -66, -29, -39, 43, 37, 1, 32, -19, -3, 28, -42, -3, 44, 39, -47, 24, -83, -23, -27, 37, 35, -9, 38, -6, 7, 28, -68, 4, 37, 34, -32, 9, -49, -54, -46, 18, 29, -17, 34, -17, 4, 12, -53, 38, 41, 31, -25, 44, -59, -36, -28, 11, 27, -40, 28, 11, 4, -3, -56, 4, 64, 28, -39, -4, -47, -12, -38, 34, 45, -19, 47, 27, 11, -30, 4, -4, 45, -116, -7, 4, -18, 6, -92, 27, 34, -27, 30, 6, 43, -19, -34, 31, -14, 38, 10, 
  -26, 16, -45, 14, -14, -9, -18, 45, -93, 39, 66, 3, 7, -20, 12, 24, -15, -10, -29, -7, 13, -4, -21, 38, -95, -6, 16, -18, -6, -24, -2, 14, -5, -15, -75, -9, 8, -6, -39, -4, -94, -25, 0, 21, -21, -18, 3, 20, -12, -34, -88, 18, 8, -8, -59, -11, -64, -38, -7, 24, -3, -30, 10, 11, -21, -47, -94, 9, 9, -22, -52, 4, -26, -78, -14, 23, -6, -57, -19, 12, -8, -72, -91, -16, 1, 2, -69, -24, -5, -39, -1, -12, -35, -58, -13, 41, -16, -96, -100, 8, 17, -2, -85, 3, -39, -33, -28, -7, -9, -11, -36, 17, -33, -30, -84, -17, -1, -32, -49, 4, -14, -36, -5, -19, -17, -33, -22, 25, -29, -35, -58, -13, 14, -43, -32, -16, -29, -36, -19, 4, -20, -13, -2, 26, -25, -96, -53, -12, -4, -52, -42, -16, -68, -31, 2, 27, -6, -20, -2, 18, -23, -46, -52, 4, 12, -51, -23, -15, -63, -28, -14, 26, 16, 7, -21, 52, -2, -2, -25, -10, 7, -33, 2, -14, -73, -13, 5, -19, -13, -8, -5, 9, 38, 29, 4, -4, -3, -41, 23, 1, -41, -14, -12, 54, 11, -33, -16, 26, 
  29, -2, 51, -7, 8, -10, -90, -22, -8, -12, 0, 35, -49, 15, -31, 11, 41, 14, 30, -27, 13, 7, -87, -67, 7, 36, -51, 31, -31, -14, -104, 11, 37, 11, 39, -10, 16, 9, -11, 32, 18, 30, -57, 58, -50, 6, -101, 29, 25, 5, 25, -8, 12, -7, -8, 9, 28, 40, -67, 40, -32, -30, -104, 10, 32, 7, 30, -26, 11, -3, -19, 7, 9, 31, -51, 53, -16, -3, -71, 10, 35, -8, 20, 6, 24, -7, -3, 22, 2, 36, -72, 46, -28, -22, -58, 1, 43, -9, 17, 23, 19, -24, -16, 8, 18, 32, -96, 44, -19, -18, -79, 40, 32, -15, 28, 11, 15, -25, 4, 9, -22, 40, -97, 43, -5, -29, -95, 21, 42, -30, 16, 23, 32, -18, -5, 12, -34, 34, -71, 29, -7, -20, -85, 5, 53, -15, 31, 33, 19, -22, -48, 12, 23, 39, -89, 32, -3, -12, -63, 31, 43, -34, 10, 25, 4, -59, -32, 3, -4, 28, -102, 16, 8, -39, -127, -9, 22, -48, 30, 39, 15, -32, -38, -4, 14, 25, -88, 46, -32, -36, -36, 29, -37, 30, -8, 38, -109, -14, -9, 16, 24, 66, -22, -64, 44, 57, 10, -22, 
  -63, -2, 3, 25, -20, -26, -16, -2, -2, -31, -13, -26, 26, -9, 10, 9, -43, -23, 1, 42, -42, -3, -18, 35, -10, -25, -24, -19, 41, -63, 19, -11, -30, -10, 5, 44, -77, -3, -33, 18, -5, -32, 38, -46, 44, -76, 32, -3, -35, -10, -2, 44, -36, -42, 0, 14, 0, -54, 56, -15, 36, -19, -10, 6, -20, -4, 6, 48, -22, -6, 3, 0, -22, -57, 37, -7, 33, -53, 9, -23, -41, 7, 7, 43, -37, -36, -1, 10, -14, -57, 36, -41, 31, -51, 12, -13, -33, 8, 7, 49, -60, -44, -16, -5, 41, -61, 31, -5, 43, -69, 11, -5, -17, 17, 1, 36, -54, -40, -23, -22, 32, -68, 40, -25, 26, -73, -1, 0, -20, 24, 18, -4, -19, -58, -12, -44, 24, -61, 37, -3, 29, -34, 4, 0, -59, 8, 6, -30, -82, -51, -2, -64, 12, -63, 41, -21, 35, -48, -1, -10, -43, 3, 5, -22, -41, -43, 10, -59, 15, -48, 52, 16, -10, -14, 25, 2, -50, 5, -13, -17, -27, -30, -17, -74, 20, -76, 46, 19, 22, -66, 39, -17, 19, 6, 5, 25, -22, -2, -22, -49, 13, -43, 32, -11, -54, 13, 7, -22, 
  -14, -8, 6, -2, -16, 22, -30, -35, 16, -21, -12, -3, 3, 3, -52, -8, -12, 27, 17, 12, -15, 7, -33, -2, 17, -9, -24, 9, 3, -3, -46, -17, 1, 9, 17, -7, -15, 12, -20, -20, 24, 26, -10, 3, -6, 13, -40, -36, 4, 19, 20, 6, 1, 12, -9, 9, 3, 13, 10, 4, -12, 1, -4, -23, -8, 5, 22, 7, -10, 12, -17, -2, 1, 24, -9, 19, 10, 2, -8, -10, 1, 9, 6, 8, -1, 2, 1, 13, 33, 13, -12, 12, -8, -6, -10, -20, -5, 6, 10, 10, -7, -2, -20, 7, 8, 23, -5, 9, -8, -10, -17, -9, -11, 13, 13, 20, -9, 8, -9, 7, 27, 17, 8, 5, -5, 2, -11, 2, 2, 22, 19, 21, 5, 24, 4, 1, 7, 10, -6, 0, -9, -8, -7, -17, 6, 3, 20, 19, 3, 11, -7, 12, 15, 25, -11, -15, -16, -25, -14, -13, 22, 8, 3, 2, 1, 6, -11, -2, 13, 11, -8, -9, -16, -12, -15, -7, 40, 12, 14, 5, -61, 10, -1, -1, 37, 12, 10, -30, -10, -14, -9, -1, 0, 4, -19, -4, 52, 5, 11, -9, 29, -3, -8, 34, -58, -88, -11, 16, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 6,208 } };
const TfArray<1, float> quant5_scale = { 1, { 0.011486420407891273, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0010863265488296747, 0.00031279277754947543, 0.00048077944666147232, 0.00033381159300915897, 0.00024090267834253609, 0.00029445634572766721, 0.00084091373719274998, 0.00036544579779729247, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ 18,-3,11,6,4,-1,-4,3,3,0,1,-2,0, 91,1,-14,-7,-8,-2,2,0,-6,-6,1,-2,4, -127,-2,0,1,0,-2,-1,-3,1,2,-1,-2,-2, 
  /* [1][0][][] */ 127,-5,-36,-6,26,-33,-29,33,-3,-6,-19,1,-3, 53,29,-50,-20,-12,-1,15,15,-18,-5,-14,16,15, 106,11,-55,-34,-19,46,10,-15,-10,0,22,-29,-8, 
  /* [2][0][][] */ 30,-57,-2,-10,-9,16,10,7,2,3,0,-14,6, 30,-8,-12,-2,-24,15,22,-10,-20,-11,-8,7,1, 127,3,-12,16,-24,11,26,-3,-2,-2,-2,-14,13, 
  /* [3][0][][] */ -66,127,43,-30,26,8,-16,-8,-17,27,30,20,-10, -88,99,-26,34,2,-24,-10,-3,25,15,-12,-13,-11, 125,76,-40,49,-10,-34,-17,0,9,2,13,-14,-12, 
  /* [4][0][][] */ 113,45,83,14,-103,-15,-33,-30,-15,-9,20,14,-9, 1,55,127,-9,-74,2,-94,29,-71,9,11,15,-3, 43,58,119,-8,-112,29,-57,12,-12,0,-7,34,4, 
  /* [5][0][][] */ 1,-46,59,-11,-34,-29,21,-38,-3,-8,2,7,14, 127,35,61,6,-54,-29,20,14,-7,-4,10,-23,27, 83,-55,98,-72,-4,-44,15,22,14,-14,-14,24,0, 
  /* [6][0][][] */ -127,-20,-23,-4,-2,-5,-2,-5,7,-4,-2,-1,1, 26,16,-4,0,-3,5,8,1,-8,3,3,-4,2, 33,-20,15,-1,-1,0,-9,-4,1,6,0,-1,0, 
  /* [7][0][][] */ 109,18,24,47,15,10,-25,14,29,-20,-3,-11,-3, 58,4,65,34,45,-36,-9,1,-16,37,-2,20,-24, -85,-48,127,-22,4,-34,29,-6,6,-27,30,-15,-8, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant7_scale = { 8, { 0.022323034703731537, 0.0064276102930307388, 0.0098795853555202484, 0.0068595283664762974, 0.0049503333866596222, 0.006050813477486372, 0.01728002168238163, 0.0075095826759934425, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0010308625642210245, 0.00070185930235311389, 0.00083606765838339925, 0.0013447343371808529, 0.0010710424976423383, 0.00037430558586493134, 0.00077181315282359719, 0.0013576661003753543, 0.00086162029765546322, 0.00063098629470914602, 0.00082931970246136189, 0.0011614582035690546, 0.0012565753422677517, 0.00042625825153663754, 0.00082307611592113972, 0.00052861118456348777, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ -77,-7,-19,16,-13,-69,5,-24, -127,0,-16,-3,-18,-84,-1,-47, -95,10,28,15,-55,-23,-1,-96, 
  /* [1][0][][] */ -40,16,-8,1,-14,-44,-127,-39, -33,-5,-32,4,6,-44,-110,-28, -28,11,-34,22,1,-33,-123,27, 
  /* [2][0][][] */ -127,30,0,18,-3,11,-22,-7, -81,-7,-2,5,-6,-9,-112,-1, -64,15,1,11,9,4,-88,1, 
  /* [3][0][][] */ -72,-41,2,-98,-22,7,3,0, -5,-28,5,-99,-37,3,-6,-1, 5,-40,-4,-127,-25,8,-14,14, 
  /* [4][0][][] */ -24,-5,-4,-2,-91,-45,7,-83, -23,-6,-10,13,-127,-23,0,-53, -2,0,35,-13,-61,-6,-5,-24, 
  /* [5][0][][] */ -83,-12,-92,33,29,-3,-88,31, -98,-52,-127,18,-5,-10,-105,3, -44,-123,-105,-3,24,-49,-83,41, 
  /* [6][0][][] */ -66,-13,33,-66,20,14,-8,-6, -58,-6,-16,-127,-6,10,-25,-43, -76,9,13,-50,-53,-14,-119,-38, 
  /* [7][0][][] */ 1,-64,-1,-12,10,15,2,2, -2,-80,-22,-10,-1,7,-13,2, 3,-127,-34,4,7,2,-5,3, 
  /* [8][0][][] */ -15,-48,-19,-47,-59,-127,0,-11, -17,-68,-74,-21,-38,-66,0,-10, -12,-88,-93,-56,-29,-8,-1,3, 
  /* [9][0][][] */ -92,12,3,33,-11,-2,-99,-17, -8,-7,24,-96,-19,8,-124,-8, -36,-20,-5,-56,69,5,-127,-2, 
  /* [10][0][][] */ -1,43,-2,-7,-4,-1,-64,-61, 12,-16,-15,4,-21,-83,-17,-17, 14,-9,-51,3,-78,-127,9,-60, 
  /* [11][0][][] */ -4,-50,-126,9,2,-10,6,-12, -17,-10,-127,-8,2,-12,-3,-11, 0,21,-6,25,-9,-18,-3,-37, 
  /* [12][0][][] */ 3,-45,-6,-44,-25,13,-9,9, 3,-127,-14,-22,-7,-4,0,6, -34,14,4,-2,2,21,3,-6, 
  /* [13][0][][] */ -14,-39,-59,18,-114,-26,-10,-29, 8,-127,-29,16,-51,11,19,2, -62,-33,-7,-24,94,-5,-7,1, 
  /* [14][0][][] */ -12,1,45,-18,-10,-4,-20,-124, -5,-2,-13,-4,-63,-8,-127,-90, -5,6,-14,3,-119,-83,-22,-61, 
  /* [15][0][][] */ 0,-69,-127,5,-27,-43,4,5, 5,-17,-5,51,-21,12,2,-44, 44,5,5,-29,-19,12,-4,-21, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.016969066113233566, 0.011553331278264523, 0.013762540183961391, 0.022135721519589424, 0.017630469053983688, 0.006161457858979702, 0.012704844586551189, 0.022348592057824135, 0.014183163642883301, 0.010386688634753227, 0.013651462271809578, 0.019118806347250938, 0.020684532821178436, 0.0070166527293622494, 0.013548686169087887, 0.0087014883756637573, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 50, 8, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 25, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.048663929104804993, } };
const TfArray<1, int> quant16_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.1479170024394989, } };
const TfArray<1, int> quant17_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,50,8 } };
const TfArray<1, float> quant18_scale = { 1, { 0.1479170024394989, } };
const TfArray<1, int> quant18_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,50,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.060749515891075134, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.060749515891075134, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.060749515891075134, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.060749515891075134, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.23891562223434448, } };
const TfArray<1, int> quant23_zero = { 1, { 95 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,25,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.23891562223434448, } };
const TfArray<1, int> quant24_zero = { 1, { 95 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,25,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.027623360976576805, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.027623360976576805, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.027623360976576805, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,208 } };
const TfArray<1, float> quant28_scale = { 1, { 0.027623360976576805, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,6 } };
const TfArray<1, float> quant29_scale = { 1, { 0.10841286182403564, } };
const TfArray<1, int> quant29_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,6 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension23, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension25, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension27, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension29, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
